name: Deploy Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION_2: eu-west-2

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

  deploy-test:
    needs: [build]
    environment: TEST
    name: "Deploy Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_DEVELOPMENT_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_DEVELOPMENT_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION_2 }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: nihrd-ecr-test-repository-nihr-hub
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: nihr-hub
          IMAGE_SHA_TAG: nihr-hub-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f Nihr.Hub.Web/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG --build-arg NUGET_PACKAGE_USERNAME=USERNAME --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Get AWS Account ID
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

      - name: Replace placeholder in task definition
        run: |
          sed -i "s/{{ACCOUNT_ID}}/${ACCOUNT_ID}/g" /home/runner/work/nihr-hub/nihr-hub/Nihr.Hub.Infrastructure/.aws/task-definition-test.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: /home/runner/work/nihr-hub/nihr-hub/Nihr.Hub.Infrastructure/.aws/task-definition-test.json
          CONTAINER_NAME: nihrd-ecs-test-nihr-hub-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION_2 }}

      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: nihrd-ecs-test-nihr-hub-service
          ECS_CLUSTER: nihrd-ecs-test-nihr-hub-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-prod:
    needs: deploy-test
    environment: PROD
    name: "Deploy Prod"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_DEVELOPMENT_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_DEVELOPMENT_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION_2 }}

      - name: Configure AWS credentials (prod)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION_2 }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: nihrp-ecr-prod-nihr-hub-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: nihr-hub
          IMAGE_SHA_TAG: nihr-hub-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Get AWS Account ID
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

      - name: Replace placeholder in task definition
        run: |
          sed -i "s/{{ACCOUNT_ID}}/${ACCOUNT_ID}/g" /home/runner/work/nihr-hub/nihr-hub/Nihr.Hub.Infrastructure/.aws/task-definition-test.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: /home/runner/work/nihr-hub/nihr-hub/Nihr.Hub.Infrastructure/.aws/task-definition-test.json
          CONTAINER_NAME: nihrp-ecs-prod-nihr-hub-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION_2 }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}

      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: nihrp-ecs-prod-nihr-hub-service
          ECS_CLUSTER: nihrp-ecs-prod-nihr-hub-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
